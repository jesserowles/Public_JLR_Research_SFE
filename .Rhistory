for (rx in rsps) { #loop through all RSPs for the x values of the plot data
for (rc in rsps) { #loop through all RSPs again for the color scale
if ((rx != rc) & (rx != 'LOI')) { #don't plot LOI on x axis, and don't plot RSP as colorscale when also plotted on x axis
if ((rx == 'UDL') | (rx == 'UDUL')) {
pltbl <- mrgtbl[mrgtbl$LOI != 2240,] #LOI 2240 has very high values of UDL and UDUL such that it throws off the scale, so don't plot them
} else {
pltbl <- mrgtbl #rename table, this is where other filtering of data can be performed if needed
}
# plot data
p <- ggplot(pltbl, aes_string(x=rx, y=metric, color=rc)) + #plot metric vs RSP colored by other RSP
geom_point(size=5) + #size of data points
coord_cartesian( ylim = ys) #set y limit from set y values above
if (class(pltbl[,rc]) == 'numeric') { # define how to color scale
srtrsp <- sort(pltbl[,rc],decreasing=TRUE) # sort data by colored RSP
if (srtrsp[1] / srtrsp[2] > 5) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
ggsave(paste0(metloc,rx,' colored by ',rc,'.png'),plot=p,width=4,height=4) #save data
if (do_rsp_comp == 1) { #make RSP comparison plots
r <- ggplot(pltbl, aes_string(x=rx, y=rc, color='LOI')) + geom_point(size=5)
ggsave(paste0(rsploc,rx,' vs ',rc,'.png'),plot=r,width=4,height=4)
}
if (do_rsp_comp == 1) { do_rsp_comp = 0} #only run RSP comparison once
} else { #skip variables already done when plot_all does not equal 1
print(paste0('Skipping ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc),', already done'))
}
srtrsp
(srtrsp[1] / srtrsp[2] > 5)
length(srtrsp)
length(srtrsp) > 1 & (srtrsp[1] / srtrsp[2] > 5)
(srtrsp[1] / srtrsp[2] > 5)
length(srtrsp) > 1 && (srtrsp[1] / srtrsp[2] > 5)
if (length(srtrsp) > 1) && (srtrsp[1] / srtrsp[2] > 5) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
if (length(srtrsp) > 1) & (srtrsp[1] / srtrsp[2] > 5) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
if (length(srtrsp) > 1) & (srtrsp[1] / srtrsp[2] > 5) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
if ((length(srtrsp) > 1) & (srtrsp[1] / srtrsp[2] > 5)) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
rm(list = ls())
# This function generates the plots for Question 1 which tries to answer if there are
# relationships between performance and RSP. This function plots each performance
# metric against each RSP and color codes them by LOI, and by the other RSPs to see if
# outliers have significant values of other RSPs.
# Note: path must be set to 'Public_JLR_Research_Repo' location
require(regionaldrivers)
require(plyr)
require(dplyr)
require(ggplot2)
#** Change this for the location on your machine to the repository
setwd('C:/Users/jesse/Documents/Grad_School/Public_JLR_Research_Repo/')
#define all performance metrics to plot
allmets <- c("Entire.POR.Frequency.of.Days.for.Ecological.Demands"
,"Entire.POR.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"Entire.POR.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"Entire.POR.Mean.Standardized.Impairment"
# ,"Entire.POR.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"Entire.POR.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"Entire.POR.Standardized.Impairment.7.Day.Moving.Avg.Max"
,"January.Frequency.of.Days.for.Ecological.Demands"
,"January.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"January.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"January.Mean.Standardized.Impairment"
# ,"January.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"January.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"January.Standardized.Impairment.7.Day.Moving.Avg.Max"
,"July.Frequency.of.Days.for.Ecological.Demands"
,"July.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"July.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"July.Mean.Standardized.Impairment"
# ,"July.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"July.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"July.Standardized.Impairment.7.Day.Moving.Avg.Max"
)
allsscs <- c(1) #human scenarios to plot. For now, only baseline used
allescs <- c(2) #ecological scenarios to plot. For now, only Tessmann (8) and MPOF (13)
#starting path where data is stored
rspath <- './SEWAM Results Analyses/'
svloc <- paste0(rspath,'/Question 1/') #path to save plots to
do_rsp_comp <- 1 #set this to 1 to create plots of each RSP vs the others
#if plot_all is 0, do not re-run analyses for that metric if the folder is already made. If it's 1, do every metric regardless
plot_all <- 1
#read in table of RSPs by LOI
rspfile <- paste0('./Reference Files/Master RSP List.csv')
rsptab.all <- read.csv(rspfile)
#read in table of performance by LOI
prfile <- paste0('./Reference Files/Performance by LOI Sept 2020.csv')
prftab.all <- read.csv(prfile)
for (metric in allmets) { #loop through all metrics
for (ssc in allsscs) { # loop through all human scenarios
for (esc in allescs) {#loop through all ecological scenarios
prftab.scn <- filter(prftab.all,(prftab.all$SSC == ssc) & (prftab.all$ESC == esc)) #filter performance by human/eco scenario
prftab <- prftab.scn %>% select(c("LOI",metric)) #only keep LOI and performance metric columns
mrgtbl <- merge(prftab,rsptab.all,by='LOI') # merge RSP table with LOI/metric table
mrgtbl$LOI = as.factor(mrgtbl$LOI)
# need to set y bounds of plots so they are consistent among metrics (needs to be updated
# using performance values rather than hardcoded)
ys <- c(0,1) #start with 0 to 100%
if (grepl("Ecological.Demands",metric)) { #change y values for ecological frequency reliabilty
ys <- c(0, 0.75)
}
if (grepl("Human.Demands",metric)) { #change y values for human frequency reliabilty
mrgtbl <- filter(mrgtbl,(mrgtbl$LOI != 2220) & (mrgtbl$LOI != 2230)) #remove 2220 and 2230 since - no permitted demands
ys <- c(0, 0.7)
}
if (grepl("Mean.Standardized.Impairment",metric)) { #change y values for MSI
ys = c(0, 0.15)
}
rsps <- names(mrgtbl %>% select(-c(metric,'X','dnLOI','Lat','Lon'))) #get list of RSP names
#name folder for metric
metloc <- paste0(svloc, metric,' S',toString(ssc),'E',toString(esc),'/')
if (!dir.exists(metloc) | plot_all == 1) { #only run through if folder doesn't exist of plot_all = 1
print(paste0('Plotting ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc)))
if (!dir.exists(metloc)) {
dir.create(metloc)
}
if (do_rsp_comp == 1) { #create another folder for RSP comparison if selected
rsploc <- paste0(svloc,'RSP Comparison/')
if (!dir.exists(rsploc)) {
dir.create(rsploc)
}
mrgtbl[mrgtbl==-1] <- NaN #change -1 values to NaN so they are ignored when plotting
jet <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")) # define colormap
for (rx in rsps) { #loop through all RSPs for the x values of the plot data
for (rc in rsps) { #loop through all RSPs again for the color scale
if ((rx != rc) & (rx != 'LOI')) { #don't plot LOI on x axis, and don't plot RSP as colorscale when also plotted on x axis
if ((rx == 'UDL') | (rx == 'UDUL')) {
pltbl <- mrgtbl[mrgtbl$LOI != 2240,] #LOI 2240 has very high values of UDL and UDUL such that it throws off the scale, so don't plot them
} else {
pltbl <- mrgtbl #rename table, this is where other filtering of data can be performed if needed
}
# plot data
p <- ggplot(pltbl, aes_string(x=rx, y=metric, color=rc)) + #plot metric vs RSP colored by other RSP
geom_point(size=5) + #size of data points
coord_cartesian( ylim = ys) #set y limit from set y values above
if (class(pltbl[,rc]) == 'numeric') { # define how to color scale
srtrsp <- sort(pltbl[,rc],decreasing=TRUE) # sort data by colored RSP
if ((length(srtrsp) > 1) & (srtrsp[1] / srtrsp[2] > 5)) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
ggsave(paste0(metloc,rx,' colored by ',rc,'.png'),plot=p,width=4,height=4) #save data
if (do_rsp_comp == 1) { #make RSP comparison plots
r <- ggplot(pltbl, aes_string(x=rx, y=rc, color='LOI')) + geom_point(size=5)
ggsave(paste0(rsploc,rx,' vs ',rc,'.png'),plot=r,width=4,height=4)
}
if (do_rsp_comp == 1) { do_rsp_comp = 0} #only run RSP comparison once
} else { #skip variables already done when plot_all does not equal 1
print(paste0('Skipping ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc),', already done'))
}
rm(list = ls())
# This function generates the plots for Question 1 which tries to answer if there are
# relationships between performance and RSP. This function plots each performance
# metric against each RSP and color codes them by LOI, and by the other RSPs to see if
# outliers have significant values of other RSPs.
# Note: path must be set to 'Public_JLR_Research_Repo' location
require(regionaldrivers)
require(plyr)
require(dplyr)
require(ggplot2)
#** Change this for the location on your machine to the repository
setwd('C:/Users/jesse/Documents/Grad_School/Public_JLR_Research_Repo/')
#define all performance metrics to plot
allmets <- c("Entire.POR.Frequency.of.Days.for.Ecological.Demands"
,"Entire.POR.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"Entire.POR.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"Entire.POR.Mean.Standardized.Impairment"
# ,"Entire.POR.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"Entire.POR.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"Entire.POR.Standardized.Impairment.7.Day.Moving.Avg.Max"
,"January.Frequency.of.Days.for.Ecological.Demands"
,"January.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"January.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"January.Mean.Standardized.Impairment"
# ,"January.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"January.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"January.Standardized.Impairment.7.Day.Moving.Avg.Max"
,"July.Frequency.of.Days.for.Ecological.Demands"
,"July.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"July.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"July.Mean.Standardized.Impairment"
# ,"July.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"July.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"July.Standardized.Impairment.7.Day.Moving.Avg.Max"
)
allsscs <- c(1) #human scenarios to plot. For now, only baseline used
allescs <- c(2) #ecological scenarios to plot. For now, only Tessmann (8) and MPOF (13)
#starting path where data is stored
rspath <- './SEWAM Results Analyses/'
svloc <- paste0(rspath,'/Question 1/') #path to save plots to
do_rsp_comp <- 1 #set this to 1 to create plots of each RSP vs the others
#if plot_all is 0, do not re-run analyses for that metric if the folder is already made. If it's 1, do every metric regardless
plot_all <- 1
#read in table of RSPs by LOI
rspfile <- paste0('./Reference Files/Master RSP List.csv')
rsptab.all <- read.csv(rspfile)
#read in table of performance by LOI
prfile <- paste0('./Reference Files/Performance by LOI Sept 2020.csv')
prftab.all <- read.csv(prfile)
for (metric in allmets) { #loop through all metrics
for (ssc in allsscs) { # loop through all human scenarios
for (esc in allescs) {#loop through all ecological scenarios
prftab.scn <- filter(prftab.all,(prftab.all$SSC == ssc) & (prftab.all$ESC == esc)) #filter performance by human/eco scenario
prftab <- prftab.scn %>% select(c("LOI",metric)) #only keep LOI and performance metric columns
mrgtbl <- merge(prftab,rsptab.all,by='LOI') # merge RSP table with LOI/metric table
mrgtbl$LOI = as.factor(mrgtbl$LOI)
# need to set y bounds of plots so they are consistent among metrics (needs to be updated
# using performance values rather than hardcoded)
ys <- c(0,1) #start with 0 to 100%
if (grepl("Ecological.Demands",metric)) { #change y values for ecological frequency reliabilty
ys <- c(0, 0.75)
}
if (grepl("Human.Demands",metric)) { #change y values for human frequency reliabilty
mrgtbl <- filter(mrgtbl,(mrgtbl$LOI != 2220) & (mrgtbl$LOI != 2230)) #remove 2220 and 2230 since - no permitted demands
ys <- c(0, 0.7)
}
if (grepl("Mean.Standardized.Impairment",metric)) { #change y values for MSI
ys = c(0, 0.15)
}
rsps <- names(mrgtbl %>% select(-c(metric,'X','dnLOI','Lat','Lon'))) #get list of RSP names
#name folder for metric
metloc <- paste0(svloc, metric,' S',toString(ssc),'E',toString(esc),'/')
if (!dir.exists(metloc) | plot_all == 1) { #only run through if folder doesn't exist of plot_all = 1
print(paste0('Plotting ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc)))
if (!dir.exists(metloc)) {
dir.create(metloc)
}
if (do_rsp_comp == 1) { #create another folder for RSP comparison if selected
rsploc <- paste0(svloc,'RSP Comparison/')
if (!dir.exists(rsploc)) {
dir.create(rsploc)
}
mrgtbl[mrgtbl==-1] <- NaN #change -1 values to NaN so they are ignored when plotting
jet <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")) # define colormap
for (rx in rsps) { #loop through all RSPs for the x values of the plot data
for (rc in rsps) { #loop through all RSPs again for the color scale
if ((rx != rc) & (rx != 'LOI')) { #don't plot LOI on x axis, and don't plot RSP as colorscale when also plotted on x axis
if ((rx == 'UDL') | (rx == 'UDUL')) {
pltbl <- mrgtbl[mrgtbl$LOI != 2240,] #LOI 2240 has very high values of UDL and UDUL such that it throws off the scale, so don't plot them
} else {
pltbl <- mrgtbl #rename table, this is where other filtering of data can be performed if needed
}
# plot data
p <- ggplot(pltbl, aes_string(x=rx, y=metric, color=rc)) + #plot metric vs RSP colored by other RSP
geom_point(size=5) + #size of data points
coord_cartesian( ylim = ys) #set y limit from set y values above
if (class(pltbl[,rc]) == 'numeric') { # define how to color scale
srtrsp <- sort(pltbl[,rc],decreasing=TRUE) # sort data by colored RSP
if ((length(srtrsp) > 1) & (srtrsp[1] / srtrsp[2] > 5)) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
ggsave(paste0(metloc,rx,' colored by ',rc,'.png'),plot=p,width=4,height=4) #save data
if (do_rsp_comp == 1) { #make RSP comparison plots
r <- ggplot(pltbl, aes_string(x=rx, y=rc, color='LOI')) + geom_point(size=5)
ggsave(paste0(rsploc,rx,' vs ',rc,'.png'),plot=r,width=4,height=4)
}
if (do_rsp_comp == 1) { do_rsp_comp = 0} #only run RSP comparison once
} else { #skip variables already done when plot_all does not equal 1
print(paste0('Skipping ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc),', already done'))
}
metloc
unlink(metloc)
file.remove(metloc)
unlink(metloc,recursive=TRUE)
metloc
unlink(metloc,recursive=TRUE)
test = 'C:/Users/jesse/Documents/Grad_School/Public_JLR_Research_Repo/SEWAM Results Analyses/Question 1/Entire.POR.Frequency.of.Days.for.Ecological.Demands S1E2'
unlink(test,recursive=TRUE)
normalizePath(metloc)
rm(list = ls())
# This function generates the plots for Question 1 which tries to answer if there are
# relationships between performance and RSP. This function plots each performance
# metric against each RSP and color codes them by LOI, and by the other RSPs to see if
# outliers have significant values of other RSPs.
# Note: path must be set to 'Public_JLR_Research_Repo' location
require(regionaldrivers)
require(plyr)
require(dplyr)
require(ggplot2)
#** Change this for the location on your machine to the repository
setwd('C:/Users/jesse/Documents/Grad_School/Public_JLR_Research_Repo/')
#define all performance metrics to plot
allmets <- c("Entire.POR.Frequency.of.Days.for.Ecological.Demands"
,"Entire.POR.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"Entire.POR.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"Entire.POR.Mean.Standardized.Impairment"
# ,"Entire.POR.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"Entire.POR.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"Entire.POR.Standardized.Impairment.7.Day.Moving.Avg.Max"
,"January.Frequency.of.Days.for.Ecological.Demands"
,"January.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"January.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"January.Mean.Standardized.Impairment"
# ,"January.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"January.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"January.Standardized.Impairment.7.Day.Moving.Avg.Max"
,"July.Frequency.of.Days.for.Ecological.Demands"
,"July.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"July.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"July.Mean.Standardized.Impairment"
# ,"July.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"July.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"July.Standardized.Impairment.7.Day.Moving.Avg.Max"
)
allsscs <- c(1) #human scenarios to plot. For now, only baseline used
allescs <- c(2) #ecological scenarios to plot. For now, only Tessmann (8) and MPOF (13)
#starting path where data is stored
rspath <- './SEWAM Results Analyses/'
svloc <- paste0(rspath,'/Question 1/') #path to save plots to
do_rsp_comp <- 1 #set this to 1 to create plots of each RSP vs the others
#if plot_all is 0, do not re-run analyses for that metric if the folder is already made. If it's 1, do every metric regardless
plot_all <- 1
#read in table of RSPs by LOI
rspfile <- paste0('./Reference Files/Master RSP List.csv')
rsptab.all <- read.csv(rspfile)
#read in table of performance by LOI
prfile <- paste0('./Reference Files/Performance by LOI Sept 2020.csv')
prftab.all <- read.csv(prfile)
for (metric in allmets) { #loop through all metrics
for (ssc in allsscs) { # loop through all human scenarios
for (esc in allescs) {#loop through all ecological scenarios
prftab.scn <- filter(prftab.all,(prftab.all$SSC == ssc) & (prftab.all$ESC == esc)) #filter performance by human/eco scenario
prftab <- prftab.scn %>% select(c("LOI",metric)) #only keep LOI and performance metric columns
mrgtbl <- merge(prftab,rsptab.all,by='LOI') # merge RSP table with LOI/metric table
mrgtbl$LOI = as.factor(mrgtbl$LOI)
# need to set y bounds of plots so they are consistent among metrics (needs to be updated
# using performance values rather than hardcoded)
ys <- c(0,1) #start with 0 to 100%
if (grepl("Ecological.Demands",metric)) { #change y values for ecological frequency reliabilty
ys <- c(0, 0.75)
}
if (grepl("Human.Demands",metric)) { #change y values for human frequency reliabilty
mrgtbl <- filter(mrgtbl,(mrgtbl$LOI != 2220) & (mrgtbl$LOI != 2230)) #remove 2220 and 2230 since - no permitted demands
ys <- c(0, 0.7)
}
if (grepl("Mean.Standardized.Impairment",metric)) { #change y values for MSI
ys = c(0, 0.15)
}
rsps <- names(mrgtbl %>% select(-c(metric,'X','dnLOI','Lat','Lon'))) #get list of RSP names
#name folder for metric
metloc <- paste0(svloc, metric,' S',toString(ssc),'E',toString(esc),'/')
if (!dir.exists(metloc) | plot_all == 1) { #only run through if folder doesn't exist of plot_all = 1
print(paste0('Plotting ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc)))
if (dir.exists(metloc)) {
unlink(normalizePath(metloc), recursive = TRUE)
}
dir.create(metloc)
if (do_rsp_comp == 1) { #create another folder for RSP comparison if selected
rsploc <- paste0(svloc,'RSP Comparison/')
if (!dir.exists(rsploc)) {
dir.create(rsploc)
}
mrgtbl[mrgtbl==-1] <- NaN #change -1 values to NaN so they are ignored when plotting
jet <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")) # define colormap
for (rx in rsps) { #loop through all RSPs for the x values of the plot data
for (rc in rsps) { #loop through all RSPs again for the color scale
if ((rx != rc) & (rx != 'LOI')) { #don't plot LOI on x axis, and don't plot RSP as colorscale when also plotted on x axis
if ((rx == 'UDL') | (rx == 'UDUL')) {
pltbl <- mrgtbl[mrgtbl$LOI != 2240,] #LOI 2240 has very high values of UDL and UDUL such that it throws off the scale, so don't plot them
} else {
pltbl <- mrgtbl #rename table, this is where other filtering of data can be performed if needed
}
# plot data
p <- ggplot(pltbl, aes_string(x=rx, y=metric, color=rc)) + #plot metric vs RSP colored by other RSP
geom_point(size=5) + #size of data points
coord_cartesian( ylim = ys) #set y limit from set y values above
if (class(pltbl[,rc]) == 'numeric') { # define how to color scale
srtrsp <- sort(pltbl[,rc],decreasing=TRUE) # sort data by colored RSP
if ((length(srtrsp) > 1) & (srtrsp[1] / srtrsp[2] > 5)) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
ggsave(paste0(metloc,rx,' colored by ',rc,'.png'),plot=p,width=4,height=4) #save data
if (do_rsp_comp == 1) { #make RSP comparison plots
r <- ggplot(pltbl, aes_string(x=rx, y=rc, color='LOI')) + geom_point(size=5)
ggsave(paste0(rsploc,rx,' vs ',rc,'.png'),plot=r,width=4,height=4)
}
if (do_rsp_comp == 1) { do_rsp_comp = 0} #only run RSP comparison once
} else { #skip variables already done when plot_all does not equal 1
print(paste0('Skipping ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc),', already done'))
}
# This function generates the plots for Question 1 which tries to answer if there are
# relationships between performance and RSP. This function plots each performance
# metric against each RSP and color codes them by LOI, and by the other RSPs to see if
# outliers have significant values of other RSPs.
# Note: path must be set to 'Public_JLR_Research_Repo' location
require(regionaldrivers)
require(plyr)
require(dplyr)
require(ggplot2)
#** Change this for the location on your machine to the repository
setwd('C:/Users/jesse/Documents/Grad_School/Public_JLR_Research_Repo/')
#define all performance metrics to plot
allmets <- c("Entire.POR.Frequency.of.Days.for.Ecological.Demands"
,"Entire.POR.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"Entire.POR.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"Entire.POR.Mean.Standardized.Impairment"
# ,"Entire.POR.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"Entire.POR.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"Entire.POR.Standardized.Impairment.7.Day.Moving.Avg.Max"
,"January.Frequency.of.Days.for.Ecological.Demands"
,"January.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"January.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"January.Mean.Standardized.Impairment"
# ,"January.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"January.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"January.Standardized.Impairment.7.Day.Moving.Avg.Max"
,"July.Frequency.of.Days.for.Ecological.Demands"
,"July.Frequency.of.Days.for.All.Upstream.Human.Demands"
,"July.Frequency.of.Days.for.All.Upstream.Human.Demands.50."
,"July.Mean.Standardized.Impairment"
# ,"July.Standardized.Impairment.3.Day.Moving.Avg.Max"
# ,"July.Standardized.Impairment.5.Day.Moving.Avg.Max"
# ,"July.Standardized.Impairment.7.Day.Moving.Avg.Max"
)
allsscs <- c(1) #human scenarios to plot. For now, only baseline used
allescs <- c(2) #ecological scenarios to plot. For now, only Tessmann (8) and MPOF (13)
#starting path where data is stored
rspath <- './SEWAM Results Analyses/'
svloc <- paste0(rspath,'/Question 1/') #path to save plots to
do_rsp_comp <- 1 #set this to 1 to create plots of each RSP vs the others
#if plot_all is 0, do not re-run analyses for that metric if the folder is already made. If it's 1, do every metric regardless
plot_all <- 1
#read in table of RSPs by LOI
rspfile <- paste0('./Reference Files/Master RSP List.csv')
rsptab.all <- read.csv(rspfile)
#read in table of performance by LOI
prfile <- paste0('./Reference Files/Performance by LOI Sept 2020.csv')
prftab.all <- read.csv(prfile)
for (metric in allmets) { #loop through all metrics
for (ssc in allsscs) { # loop through all human scenarios
for (esc in allescs) {#loop through all ecological scenarios
prftab.scn <- filter(prftab.all,(prftab.all$SSC == ssc) & (prftab.all$ESC == esc)) #filter performance by human/eco scenario
prftab <- prftab.scn %>% select(c("LOI",metric)) #only keep LOI and performance metric columns
mrgtbl <- merge(prftab,rsptab.all,by='LOI') # merge RSP table with LOI/metric table
mrgtbl$LOI = as.factor(mrgtbl$LOI)
# need to set y bounds of plots so they are consistent among metrics (needs to be updated
# using performance values rather than hardcoded)
ys <- c(0,1) #start with 0 to 100%
# if (grepl("Ecological.Demands",metric)) { #change y values for ecological frequency reliabilty
# 	ys <- c(0, 0.75)
# }
# if (grepl("Human.Demands",metric)) { #change y values for human frequency reliabilty
# 	mrgtbl <- filter(mrgtbl,(mrgtbl$LOI != 2220) & (mrgtbl$LOI != 2230)) #remove 2220 and 2230 since - no permitted demands
# 	ys <- c(0, 0.7)
# }
# if (grepl("Mean.Standardized.Impairment",metric)) { #change y values for MSI
# 	ys = c(0, 0.15)
# }
rsps <- names(mrgtbl %>% select(-c(metric,'X','dnLOI','Lat','Lon'))) #get list of RSP names
#name folder for metric
metloc <- paste0(svloc, metric,' S',toString(ssc),'E',toString(esc),'/')
if (!dir.exists(metloc) | plot_all == 1) { #only run through if folder doesn't exist of plot_all = 1
print(paste0('Plotting ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc)))
if (dir.exists(metloc)) {
unlink(normalizePath(metloc), recursive = TRUE)
}
dir.create(metloc)
if (do_rsp_comp == 1) { #create another folder for RSP comparison if selected
rsploc <- paste0(svloc,'RSP Comparison/')
if (!dir.exists(rsploc)) {
dir.create(rsploc)
}
mrgtbl[mrgtbl==-1] <- NaN #change -1 values to NaN so they are ignored when plotting
jet <- colorRampPalette(c("#00007F", "blue", "#007FFF", "cyan", "#7FFF7F", "yellow", "#FF7F00", "red", "#7F0000")) # define colormap
for (rx in rsps) { #loop through all RSPs for the x values of the plot data
for (rc in rsps) { #loop through all RSPs again for the color scale
if ((rx != rc) & (rx != 'LOI')) { #don't plot LOI on x axis, and don't plot RSP as colorscale when also plotted on x axis
if ((rx == 'UDL') | (rx == 'UDUL')) {
pltbl <- mrgtbl[mrgtbl$LOI != 2240,] #LOI 2240 has very high values of UDL and UDUL such that it throws off the scale, so don't plot them
} else {
pltbl <- mrgtbl #rename table, this is where other filtering of data can be performed if needed
}
# plot data
p <- ggplot(pltbl, aes_string(x=rx, y=metric, color=rc)) + #plot metric vs RSP colored by other RSP
geom_point(size=5) + #size of data points
coord_cartesian( ylim = ys) #set y limit from set y values above
if (class(pltbl[,rc]) == 'numeric') { # define how to color scale
srtrsp <- sort(pltbl[,rc],decreasing=TRUE) # sort data by colored RSP
if ((length(srtrsp) > 1) & (srtrsp[1] / srtrsp[2] > 5)) { # if highest value is 5 times greater than second highest, color RSPs from lowest to second highest
p <- p + scale_color_gradientn(colors=jet(100), limits=c(srtrsp[length(srtrsp)],srtrsp[2]))
} else { #otherwise just color all points
p <- p + scale_color_gradientn(colors=jet(100))
}
ggsave(paste0(metloc,rx,' colored by ',rc,'.png'),plot=p,width=4,height=4) #save data
if (do_rsp_comp == 1) { #make RSP comparison plots
r <- ggplot(pltbl, aes_string(x=rx, y=rc, color='LOI')) + geom_point(size=5)
ggsave(paste0(rsploc,rx,' vs ',rc,'.png'),plot=r,width=4,height=4)
}
if (do_rsp_comp == 1) { do_rsp_comp = 0} #only run RSP comparison once
} else { #skip variables already done when plot_all does not equal 1
print(paste0('Skipping ',metric,', ESC = ',toString(esc),', SSC = ', toString(ssc),', already done'))
}
